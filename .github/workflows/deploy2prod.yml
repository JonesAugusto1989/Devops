name: Deploy2Prod
on:
  push:
    branches:
      - "main"
jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.8.2'
      - name: Exibir Envs
        run: |
          java -version
          mvn -version
      - name: Clean
        run: mvn clean
        working-directory: ./workspace/CadastroCliente
      #- name: Executar testes
      #  run: mvn test
      #  working-directory: ./workspace/CadastroCliente
      - name: Incrementar Versao
        id: versao
        shell: powershell
        working-directory: ./workspace/CadastroCliente
        run: |  
          $current = mvn help:evaluate -Dexpression=project.version -q -DforceStdout
          Write-Host "Versão atual: $current"

          # Verifica se a versão retornada é válida
          if ($current -match '^\d+\.\d+\.\d+$') {
              $parts = $current -split '\.'
              $major = [int]$parts[0]
              $minor = $parts[1]
              $patch = $parts[2]

              $new_major = $major + 1
              $next = "$new_major.$minor.$patch"

              Write-Host "Nova versão: $next"

              # Usa o operador & para invocar corretamente o comando com parâmetro
              & mvn versions:set "-DnewVersion=$next"

              # Exporta a nova versão
              "new_version=$next" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
              Write-Error "Formato de versão inválido retornado: $current"
              exit 1
          }
      - name: Build
        run: mvn package -DskipTests
        working-directory: ./workspace/CadastroCliente
